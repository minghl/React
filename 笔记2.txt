1. 关于JSX底层处理机制
    第一步：把我们编写的JSX语法，编译为虚拟DOM对象「virtualDOM」
        虚拟DOM对象：框架自己内部构件的一套对象体系（对象的相关成员都是React内部规定的），基于这些属性描述出，我们所构建视图中的，DOM节点的相关特征
        @1 基于babel-preset-react-app 把JSX编译为 React.createElement(...)这种格式
            只要是元素节点，必然会基于createElement进行处理！
            React.createElement(ele,props,...children)
                + ele：元素标签名「或组件」
                + props：元素的属性集合「如果没有设置过任何的属性，则此值为null」
                + children：从第三个及以后的参数，都是当前元素的子节点

        @2 再把createElement 方法执行，创建出virtualDOM虚拟DOM对象「JSX元素、JSX对象、ReactChild对象...」
            vritualDOM = {
                $$typeof: Symbol(react.element),
                ref:null,
                key:null,
                type:标签名「或组件」,
                // 存储了元素的相关属性&&自节点信息
                props:{
                    元素的相关属性,
                    children:子节点信息「没有子节点则没有这个属性、属性值可能是一个值、也可能是一个数组」
                }
            }

    第二步：把构建的virtualDOM渲染为真实DOM
        真实DOM：浏览器页面中，最后渲染出来，让用户看见的DOM元素
        基于ReactDOM中的render方法处理的
            v16
            ReactDOM.render(
                <>...</>,
                document.getElementById("root")
            )
            v18
            const root = ReactDOM.createRoot(document.getElementById("root"));
            root.render(
                <>...</>
            )
    
    补充说明：第一次渲染页面是直接从virtualDOM -> 真实DOM：但是后期视图更新的时候，需要经过一个DOM-DIFF对比，计算出补丁包PATCH（两次视图差异的部分），把PATCH补丁包进行渲染

=====================
1. 函数组件
    创建：在SRC目录中，创建一个xxx.jsx的文件，就是要创建一个组件；我们在此文件中，创建一个函数，让函数返回JSX视图「或者JSX元素、virtualDOM对象」；这就是创建了一个函数组件
    调用：基于ES6Module规范，导入创建的组件「可以忽略.jsx后缀名」，像写标签一样调用这个组件即可
        <Component/> 单闭合调用
        <Component></Component> 双闭合调用
    命名：组件的名字，我们一般都采用PascalCase「大驼峰命名法」这种方式命名
    -------
    调用组件的时候，我们可以给调用的组件设置（传递）各种各样的属性
    <DemoOne title="我是标题" x={10} data={[100, 200]} className="box" style={{ fontSize: '20px' }} />
    + 如果设置的属性值不是字符串格式，需要基于“{}胡子语法”进行嵌套
    + 调用组件的时候，我们可以把一些数据/信息基于属性props的方式，传递给组件
    -------
    渲染机制
        @1 基于babel-preset-react-app把调用的组件转换为createElement格式
            React.createElement(DemoOne, {
                title: "\u6211\u662F\u6807\u9898",
                x: 10,
                data: [100, 200],
                className: "box",
                style: {
                    fontSize: '20px'
                }
            });
        @2 把createElement方法执行，创建出一个virtualDOM对象
            {
                $$typeof: Symbol(react.element),
                key: null,
                props: {title: '我是标题', x: 10, data: 数组, className: 'box', style: {fontSize: '20px'}}, //如果有子节点「双闭合调用」，则也包含children！！
                ref: null,
                type: DemoOne
            }
        @3 基于root.render把virtualDOM变为真实的DOM
            type值不再是一个字符串，而是一个函数了，此时：
            + 把函数执行 -> DemoOne()
            + 把virtualDOM中的props，作为实参传递给函数 -> DemoOne(props)
            + 接收函数执行的返回结果「也就是当前组件的virtualDOM对象」
            + 最后基于render把组件返回的虚拟DOM变为真实DOM，插入到#root容器中！！

2. 属性props的处理
    + 调用组件，传递进来的属性是“只读”的「原理：props对象被冻结了」
        Object.isFrozen(props) -> true
        获取：props.xxx
        修改：props.xxx = xxx => error
    + 作用：父组件(index.jsx)调用子组件(DemoOne.jsx)的时候，可以基于属性，把不同的信息传递给子组件，子组件接受相应的属性值，呈现出不同的效果，让组件的复用性更强
    + 虽然对传递进来的属性，我们不能直接修改，但是可以做一些规则校验
        + 设置默认值
            函数组件.defaultProps = {
                x:0,
                ...
            };
        + 设置其他规则，例如：数据值格式、是否必传... 「依赖于官方的一个插件：prop-types」
            https://github.com/facebook/prop-types
            import PropTypes from "prop-types"
            函数组件.propTypes = {
                //  类型是字符串、必传
                title:PropTypes.string.isRequired,
                //  类型是数字
                x:PropTypes.number
                //  多种校验规则中的一个
                y:PropTypes.oneOfType([
                    PropTypes.number,
                    PropTypes.bool,
                ])
            }
            传递进来的属性，首先会经历规则校验，不管校验成功或失败，最后也会把属性给形参props，只不过如果不符合设定的规则，控制台会抛出警告错误（不影响属性值的获取）
        + 如果就想把传递的属性值进行修改，我们可以：
            + 把props中的某个属性复制给其他内容「例如：变量、状态...」
            + 我们不直接操作props.xxx = xxx，但是我们可以修改变量/状态值

3. 插槽
    + 和属性一样，都是想办法，让组件具有更强的复用性
        + 传递数据值用属性
        + 传递HTML结构，用插槽，双闭合调用
    + 对children的类型做处理
        + 可以基于React.Children对象中提供的方法，对props.children做处理：count\forEach\map\toArray...
            好处：在这些方法的内部，已经对children的各种形式作了处理
            children = React.Children.toArray(children)
        + 自己写判断
            if(!children){
                children = []
            }else if(!Array.isArray(children)){
                children = [children]
            }
    + 传递进来的插槽信息，都是编译为virtualDOM后传递进来的「而不是传递的标签」
        child.props.slot
    + 具名插槽：在调用组件，传递插槽信息的时候，我们可以不用考虑顺序，直接设置好对应的名字即可

4. 静态组件和动态组件
    + 函数组件是“静态组件”
        第一次渲染组件，把函数执行
            + 产生一个私有的上下文 「EC(V)」
            + 把解析出来的props「含children」传递进来「但是被冻结了」
            + 对函数返回的JSX元素「virtualDOM」进行渲染
        当我们点击按钮的时候，会把绑定的小函数执行：
            + 修改上级上下文EC(V)中的变量
            + 私有变量值发生了变化
            + 但是“视图不会更新”
        => 也就是，函数组件第一次渲染完毕后，组件中的内容，不会根据组件中的某些操作，在进行更新，所以称它为静态组件
        => 除非在父组件，重新调用这个函数组件「可以传递不同的属性信息」
        真实项目中，有这样的需求：第一次渲染就不会在变化的，可以使用函数组件。但是大部分需求，都需要在第一次渲染完毕后，基于组件内部的某些操作，让组件可以更新，依次呈现出不同的效果==>动态组件「方法：类组件、Hooks组件（在函数组件中，使用Hooks函数）」
    + 类组件是“动态组件”
        + 创建一个构造函数（类）
            + 要求必须继承React.Component/PureComponent这个类
            + 我们习惯于使用ES6中的class创建类「因为方便」
            + 必须给当前类设置一个render的方法「放在其原型上」：在render方法中，返回需要渲染的视图
        + render函数在渲染的时候，如果type是：
            + 字符串：创建一个标签
            + 普通函数：把函数执行，并且把props传递给函数
            + 构造函数：把构造函数基于new执行「也就是创建类的一个实例」，也会把解析出出来的props传递过去
                + 每调用一次类组件都会创建一个单独的实例
                + 把在类组件中编写的render函数执行，把返回的jsx「virtualDOM」当作组件视图进行渲染
                new Vote({
                    title:"React还是很好学的！"
                })
        + 从调用类组件「new Vote({...})」开始，类组件内部发生的事情：
            1. 初始化属性 && 规则校验
                先规则校验，校验完毕后，再处理属性的其他操作
                方案一：
                constructor(props){
                    super(props); // 会把传递进来的属性挂载到this实例上
                }
                方案二：即便我们不在constructor中处理「或者constructor都没写」，在constructor处理完毕后，React内部也会把传递的props挂载到实例上；所以在其他的函数中，只要保证this是实例，就可以基于this.props获取传递的属性
                    + 同样this.props获取的属性对象也是被冻结的{只读的} Object.isFrozen(this.props) => true 
            2. 初始化状态
                状态：后期修改状态，可以触发视图的更新
                需要手动初始化，如果我们没有去做相关的处理，则默认会往实例上挂载一个state，初始值是null => this.state = null
                手动处理：
                state = {
                    ...
                }
                -----------修改状态，控制视图更新
                this.state.xxx=xxx：这种操作仅仅是修改了状态值，但是无法更新视图
                想让视图更新，我们需要基于React.Component.prototype提供的方法操作：
                    @1 this.setState(partialState) 既可以修改状态，也可以让视图更新「推荐」
                        partialState:部分状态
                        this.setState({
                            xxx:xxx
                        })
                    @2 this.forceUpdate() 强制更新
            3. 触发 componentWillMount 周期函数（钩子函数）：组件第一次渲染之前
                钩子函数：在程序运行到某个阶段，我们可以基于提供一个处理函数，让开发者在这个阶段做一些自定义的事情
                + 此周期函数。目前是不安全的「虽然可以用，但是未来可能要被移除了，所以不建议使用」
                    + 控制台会抛出黄色警告「为了不抛出警告 UNSAFE_componentWillMount」
                + 如果开启了React.StrictMode「React严格模式」，则我们使用UNSAFE_componentWillMount这样的周期函数，控制台会抛出红色警告错误
                    React.StrictMode VS "use strict"
                    + "use strict"：JS严格模式
                    + React.StrictMode：React的严格模式，它会去检查React中一些不规范的语法、或者是一些不建议使用的API等
            4. 触发 render 周期函数：渲染
            5. 触发 componentDidMount 周期函数：第一次渲染完毕
                + 已经把virtualDOM变为真实DOM了「所以我们可以获取真实DOM了」
                + ...
        + 组件更新的逻辑「第一种：组件内部的状态被修改，组件会更新」
            1. 触发 shouldComponentUpdate 周期函数：是否允许更新
                shouldComponentUpdate(nextProps,nextState){
                // nextState:存储要修改的最新状态
                // this.state：存储的还是修改前的状态「此时状态还没有改变」
                console.log(this.state,nextState);

                // 此周期函数需要返回true/false
                // 返回true：允许更新，会继续执行下一个操作
                // 返回false：不允许更新，接下来啥都不处理
                return true;
            2. 触发 componentWillUpdate 周期函数：更新之前
                + 此周期函数也是不安全的
                + 在这个阶段，状态/属性还是没被修改
            3. 修改状态值/属性值「让this.state.xxx改为最新的值」
            4. 触发 render 周期函数：组件更新
                + 按照最新的状态/属性，把返回的JSX编译为virtualDOM
                + 和上一次渲染出来的virtualDOM进行对比「DOM-DIFF」
                + 把差异的部分进行渲染「渲染为真实的DOM」
            5. 触发 componentDidUpdate 周期函数：组件更新完毕
            特殊说明：如果我们是基于 this.forceUpdate() 强制更新视图，会跳过shouldComponentUpdate周期函数的校验，直接从WillUpdate开始进行更新「也就是：视图一定会触发更新」
        + 组件更新的逻辑「第二种：父组件更新，触发子组件更新」
            1. 触发 componentWillReceiveProps 周期函数：接受最新属性之前
                + 周期函数是不安全的
                UNSAFE_componentWillReceiveProps(nextProps){
                    // this.props:存储之前的属性
                    // nextProps:传递进来的最新属性值
                    console.log("componentWillReceiveProps:",this.props,nextProps);
                }
            2. 触发 shouldComponentUpdate 周期函数
                ...
        + 组件的卸载的逻辑
            1. 触发 componentWillUnmount 周期函数: 组件销毁之前
            2. 销毁
        + 父子组件嵌套，处理机制上遵循深度优先原则：父组件在操作中，遇到子组件，一定是把子组件处理完，父组件才能继续处理
                + 父组件第一次渲染
                    父 willMount -> 父 render「子 willMount -> 子 render -> 子 didMount」-> 父 didMount
                + 父组件更新：
                    父 shouldUpdate -> 父 willUpdate -> 父 render「子 willReceiveProps -> 子 shouldUpdate -> 子 willUpdate -> 子 render -> 子 didUpdate」-> 父 didUpdate
                + 父组件销毁：
                    父 willUnmount -> 处理中 「子 willUnmount -> 子销毁」-> 父销毁
                    
        + 总结对比：
            + 函数组件是“静态组件”：
                + 组件在第一次渲染完毕后，无法基于“内部的某些操作”让组件更新「无法实现“自更新”」；但是，如果调用它的父组件更新了，那么相关的子组件也一定会更新「可能传递最新的属性值进来」
                + 函数组件具备：属性...「其他状态等内容几乎没有」
                + 优势：比类组件处理的机制简单，这样导致函数组件渲染速度更快
        
            + 类组件是“动态组件”：
                + 组件在第一次渲染完毕后，除了父组件更新可以触发其更新外，我们还可以通过：this.setState修改状态或者this.forceUpdate等方式，让组件实现“子更新”
                + 类组件具备：属性、状态、周期函数、ref...「几乎组件应该有的东西它都具备」
                + 优势：功能强大
            
            ===>Hooks组件「推荐」：具备了函数组件和类组件的各自优势，在函数组件的基础上，基于hooks函数，让函数组件也可以拥有状态、周期函数等，让函数组件也可以实现自更新「动态化」
            
扫盲知识点：关于对象的规则设置
    + 冻结 
        冻结对象：Object.freeze(obj)
        检测是否被冻结：Object.isFrozen(obj) => true/false
        + 被冻结的对象：不能修改成员值、不能新增成员、不能删除现有成员、不能给成员做劫持「Object.defineProperty」
    + 密封
        密封对象：Object.seal(obj)
        检测是否被密封：console.log(Object.isSealed(obj))
        + 被密封的对象：可以修改成员的值，但也不能删、不能新增、不能劫持
    + 扩展 
        把对象设置为不可扩展：Object.preventExtensions(obj)
        检测是否可扩展：console.log(Object.isExtensible(obj))
        + 被设置不可扩展的对象：除了不能新增成员、其余的操作都可以处理
    被冻结的对象，既是不可扩展的，也是密封的；同理，被密封的对象，也是不可扩展的

