1. PureComponent和Component区别
    PureComponent会给类组件默认添加一个shouldComponentUpdate周期函数
        + 在此周期函数中，它对新老的属性/状态 会做一个浅比较 
            浅比较：只会比较对象的第一级，对于深层次内容，不会再进行比较
        + 如果经过浅比较 发现属性和状态并没有改变，则返回false「也就是不继续更新组件」；有变化才会去更新
2. Ref
    + 受控组件和非受控组件
        受控组件：基于修改数据/状态，让视图更新，来达到需要的效果 「推荐」
        非受控组件：基于ref获取DOM元素，我们操作DOM元素，来实现需求和效果 「偶尔」
            + 基于ref获取DOM元素的语法
                1. 给需要获取的元素设置ref="xxx"，后期基于this.refs.xxx去获取相应的DOM元素「不推荐使用:在React.StrictMode模式下会报错」
                    <h2 ref='titleBox'>...</h2>
                    获取：this.refs.titleBox
                    
                2. 把ref属性值设置为一个函数
                    ref={x=>this.box2 = x}
                        + x是函数的形参：存储的就是当前DOM元素
                        + 然后我们获取的DOM元素“x”直接挂载到实例的某个属性上（例如：box2）
                    获取：this.xxx
                
                3. 基于React.createRef()方法创建一个ref对象->{current:null}
                    this.xxx = React.createRef(); //=> this.xxx = {current:null}
                    ref={REF对象(this.xxx)}
                    获取：this.xxx.current

                原理：在render渲染时，会获取virtualDOM的ref属性
                    + 如果属性值是一个字符串，则会给this.refs增加这样的一个成员，成员值就是当前的DOM元素
                    + 如果属性值是一个函数，则会把函数执行，把当前DOM元素传递给这个函数「x->DOM元素」，在函数执行的内部，一般都会把DOM元素直接挂载到实例的某个属性上
                    + 如果哦属性值是一个ref对象，则会把DOM元素赋值给对象的current属性
            + 给类组件设置ref，目的：获取当前类组件的创建的实例「后续可以根据实例获取子组件中的相关信息」
            + 给函数组件设置ref，会直接报错 Function components cannot be given refs. Attempts to access this ref will fail.
                 + 但是我们让其配合 React.forwardRef 实现ref转发
                + 目的：获取函数子组件内部的某个元素
3. setState
    this.setState([partialState],[callback])
        [partialState]:支持部分状态修改
            this.setState({
                x:100 // 不论总共有多少状态，我们只修改了x，其余状态不动
            })
        [callback]:在状态更改，视图更新完毕后触发执行「只要执行了setState，callback一定会执行」
            + 发生在componentDidUpdate周期函数之后「DidUpdate会在任何状态更改后都触发执行；而回调函数方式，可以在指定状态更新后处理一些事情」
            + 特殊：即便我们基于shouldComponentUpdate阻止了状态/视图的更新，DidUpdate周期函数肯定不止行了，但是我们设置的这个callback会调函数依然会被执行
    在React18中，setState操作都是异步的。「不论是在哪执行，例如：合成事件、周期函数、定时器...」
        目的：实现状态的批处理「统一处理」
            + 有效减少更新次数，降低性能消耗
            + 有效管理代码执行的逻辑顺序
            + ...
        原理：利用了更新队列「updater」机制来处理的
            + 在当前相同时间段内「浏览器此时可以处理的事情中」，遇到setState会立即放入到更新队列中
            + 此时状态/视图还未更新
            + 当所有的代码操作结束，会通知更新队列中的任务执行“刷新队列”：把所有放入的setState合并在一起执行，只触发一次视图更新「批处理操作」
    在React18和16中，关于setState是同步还是异步，是有一些区别的
        React18中：不论在什么地方执行setState，它都是异步的「都是基于updater更新队列机制，实现批处理」
        React16中：如果在合成事件「jsx元素中基于onXxx绑定的事件」、周期函数中，setState操作是异步的。但是如果setState出现在其他异步操作中「例如：定时器、手动获取DOM元素做的事件绑定等」，它将变为同步的操作「立即更新状态和让视图渲染」
    flushSync:可以刷新“updater更新队列”，也就是让修改状态的任务立即批处理一次
    this.setState((prevState)=>{
        // prevState:存储之前的状态值
        // return的对象，就是我们想要修改的新状态值「支持修改部分状态」
        return {
            xxx:xxx
        }
    })
4. 合成事件
    基于React内部的处理，如果我们给合成事件绑定一个“普通函数”，当事件行为触发，绑定的函数执行；方法中的this会是undefined「不好」---> 解决方案：this->实例
        + 我们可以基于JS中的bind方法：预先处理函数中的this和实参
        + 推荐：当然可以把绑定的函数设置为“箭头函数”，让其使用上下文中的this「也就是我们的实例」 
    合成事件对象SyntheticBaseEvent：我们在React合成事件触发的时候，也可以获取到事件对象，只不过此对象是合成事件对象「React内部经过特殊处理，把各个浏览器的事件对象统一化后，后见的一个事件对象」
        合成事件对象中，也包含了浏览器内置事件对象中的一些属性和方法「常用的基本都有」
        + clientX/clientY
        + pageX/pageY
        + target
        + type
        + preventDefault
        + stopPropagation
        + ...
        + nativeEvent:基于这个属性，可以获取浏览器内置「原生」的事件对象
    bind在React事件绑定中的运用
        + 绑定的方式一个普通函数，需要改变函数中的this是实例，此时需要用到bind「一般都是绑定箭头函数」
        + 想给函数传递指定的实参，可以基于bind预先处理「bind会把事件对象以最后一个实参传递给函数」
5. 事件委托
    层级结构 window -> document -> html -> body -> root -> outer -> inner
        ev.stopPropagation：阻止事件的传播「包含捕获或者冒泡」
        ev.stopImmediatePropagation：也是阻止事件传播，只不过它可以把当前元素绑定的其他方法，如果还未执行，也不会再让其执行了
    事件委托：利用事件的传播机制，实现的一套事件绑定处理方案
        例如：一个容器中，有很多元素都要在点击的时候做一些事情
            传统方案：首先获取需要操作的元素，然后逐一作事件绑定
            事件委托：只需要给容器做一个事件绑定「点击内部的任何元素，根据事件的冒泡传播机制，都会让容器的点击事件也触发；我们在这里，根据事件源，做不同的事情就可以了」
        优势：
            + 提高JS代码运行的性能，并且把处理的逻辑都集中在一起
            + 某些需求必须给予事件委托处理，例如：除了点击xx外，点击其余的任何东西，都xxx...
            + 能够给动态绑定的元素作事件绑定
            + ... 
        限制：
            + 当前操作事件必须支持冒泡传播机制
                例如：mouseenter/mouseleave等事件是没有冒泡传播机制的
            + 如果单独做的事件绑定中，做了事件传播机制的阻止，那么事件委托的操作也不会生效