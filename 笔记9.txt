1. redux-toolkit
    redux toolkit最大的特点：
    基于切片机制，把reducer和actionCreator混合在一起了

2. Object.defineProperty(obj,key,descriptors)
    1. 设置对象中某个成员的规则
        + 如果成员已经存在，则修改其规则
        + 如果成员不存在，则新增这个成员，并设置规则「默认所有规则都是false」
            Object.defineProperty(obj, 'x', {
                enumerable: false,
                writable: false,
                configurable: false
            });
    2. 数据劫持
        Object.defineProperty(obj, 'x', {
            get() {
                // 我们后期获取obj.x成员信息的时候，就会触发GET函数执行
                // 返回内容则是成员值
                console.log('GETTER触发了');
                return '@@';
            },
            set(val) {
                // 设置成员值的时候，会触发这个SETTER函数，val就是我们设置的值
                console.log('SETTER触发了', val);
            }
        });

    对象本身的规则限制：
        1. 冻结
        2. 密封
        3. 扩展
    对象中的每一个成员，也有相关的规则限制，对象“成员”的规则限制：
        + Object.getOwnPropertyDescriptor(对象, 成员)：获取对象中某个成员的规则
        + Object.getOwnPropertyDescriptors(对象)：获取对象所有成员的规则
        + 规则
            + configurable: 是否可以删除
            + writable: 是否可以更改
            + enumerable: 是否可枚举「可以被for/in或者Object.keys列举出来的属性是可枚举的」
            + value: 成员值

3. JS装饰器 decorator
    装饰器 目前还没有被证实发版，还处于 stage-2

    webpack中的babel支持装饰器：
        "@babel/plugin-proposal-class-properties": "^7.18.6",
        "@babel/plugin-proposal-decorators": "^7.20.5",

        兼容防报错
        "roadhog": "2.5.0-beta.1",
    
    需要在webpack里面加plugins：
        "plugins": [
            [
                "@babel/plugin-proposal-decorators",
                {
                "legacy": true // 让装饰器的语法以“遗留版”为主
                }
            ],
            [
                "@babel/plugin-proposal-class-properties",
                {
                "loose": true // 编译class的插件
                }
            ]
        ]

    1. 类的装饰器
        类装饰器在类声明之前被声明，可以用来监视，修改或替换类的定义
        语法：
            @函数
            class Xxx{}
        创建类的时候，会把装饰器函数执行
            + target: 当前装饰的这个类
        我们可以在装饰器函数中，给类设置一些静态私有的属性方法、或者设置原型上的属性方法等
        -----
        同一个装饰器可以作用在多个类上「需要基于class创建类」
        同一个类上，也可以使用多个装饰器
        -----
        装饰器函数执行的返回结果，会替换原有的类
            // 编译后的结果
            var _class;
            const test = target => {
                target.num = 100;
                return 100;
            };
            let Demo = test(_class = class Demo { }) || _class; 
        同一个类可以使用多个装饰器，处理顺序：从下到上处理
            @sum
            @staticNum
            class Demo { }
            console.dir(Demo);   
            // 编译后的代码
            var _class;
            const sum = target => {
                // ...
            };
            const staticNum = target => {
                // ...
            };
            let Demo = sum(_class = staticNum(_class = class Demo { }) || _class) || _class;
            console.dir(Demo); 
        装饰器的一般形式
            /* 可以基于传递不同的值，让装饰器函数有不同的效果 */
            const test = (x, y) => {
                console.log(1);
                // x:10 y:20
                // 返回的函数是装饰器函数
                return (target) => {
                    console.log(2);
                    target.num = x + y;
                };
            };
            const handle = () => {
                console.log(3);
                return (target) => {
                    console.log(4);
                    target.handle = 'AAA';
                };
            };

            @test(10, 20)
            @handle()
            class Demo { }
            => 1 3 4 2 需要先把外层函数执行，获取装饰器函数后，再按照从下到上的顺序，来执行装饰器函数
            
    2. 类中属性/方法的装饰器
        + 在给实例设置私有属性的时候，触发装饰器函数执行，以此来给属性进行装饰
            const test = (target, name, descriptor) => {
                /!* 
                target:Demo.prototype
                name:'x'
                descriptor:{configurable: true, enumerable: true, writable: true, initializer: ƒ}  修饰的属性，则初始值是基于initializer函数设置的！！ 
                *!/
                /!* 
                target:Demo.prototype
                name:'getX'
                descriptor:{configurable: true, enumerable: false, writable: true, value: ƒ}  修饰的函数，则初始值是基于value属性设置的！！ 
                *!/
                console.log(target, name, descriptor);
            };
            class Demo {
                // @test x = 100;

                @test
                x = 100;

                @test
                getX() { }
            }
            let d = new Demo;
            console.log(d); 

        + 创建只读属性的装饰器
            const readonly = (_, name, descriptor) => {
                descriptor.writable = false;
            };

        + 创建记录执行时间日志的修饰器
            const loggerTime = (_, name, descriptor) => {
                //把之前写的getX函数赋值给func
                let func = descriptor.value;
                // 然后把函数重写了「d.getX()，执行的是重写的这个函数」
                descriptor.value = function proxy(...params) {
                    console.time(name);
                    let res = func.call(this, ...params);
                    console.timeEnd(name);
                    return res;
                };
            };

        + 类中属性/方法装饰器执行顺序
            /* const A = () => {
                console.log(1);
                return () => {
                    console.log(2);
                };
            };

            const B = () => {
                console.log(3);
                return () => {
                    console.log(4);
                };
            };

            class Demo {
                @A()
                @B()
                x = 100;
            }
            // => 1 3 4 2  也是要把函数先执行，执行的返回值（小函数）作为装饰器函数，从下向上处理！！ */    


        + 装饰器的返回值
            const test = (target, name, descriptor) => {
                // 返回值必须是一个规则的描述对象，也就是对name修饰属性/方法的规则描述
                return descriptor;
            };

            class Demo {
                @test
                x = 100;
            }

            let d = new Demo;
            console.log(d);
