1. 启动后台
    进入后台代码目录：node server.js
        THE WEB SERVICE SUCCESSFULLY AND LISTENING TO THE PORT：9000!
        弊端：终端关掉，服务器就会结束
    ----------------
    我们手动结束这个服务 control+c
    我们可以基于pm2进行服务持久化管理
        npm i pm2 -g 「mac sudo」
        ---
        pm2 start server.js --name TASK 启动
        pm2 restart TASK 重启
        pm2 stop TASK 暂停
        pm2 delete TASK 删除
        ...
        pm2的好处是：终端关掉，服务器也在，如果电脑重启，服务器会消失
        地址栏输入：http://127.0.0.1:9000/getTaskList  如果可以获取到信息，说明服务器启动成功
    客户端开发：
        跨域处理：setupProxy.js
    TASKOA案例：
        后端是基于Node+Express+JSON开发的
            原本数据应该基于数据库进行存储，但是考虑到安装数据库等操作比较复杂，所以临时用json来代替数据库的存储
2. antd UI组件库
    把项目中常用的功能封装成一个个的组件「结构、样式、功能」
    在后期项目开发中，我们基本上是必用UI组件库的
    React的UI组件库
        PC端：Antd、AntdPro
        移动端：AntdMobile
    antd组件库 自带按需导入
        我们安装整个antd，后期在项目中用到哪些组件，最后打包的时候，只打包用的
    修改UI组件库中的样式：
        1. 找到渲染后的内容，去观察他的样式类和相关样式
        2. 按照样式类去修改样式，只要保证我们自己写的样式权重高即可「可基于!important提高权重」
        Vue是MVVM框架：数据驱动视图渲染、视图驱动数据更改「自动检测页面中表单元素的变化，从而修改对应的状态」双向驱动
        React是MVC框架：数据驱动视图渲染 单向驱动
            需要自己手动实现，视图变化，去修改相关的状态
    时间日期处理插件：
        moment.js antd<=4
        day.js antd>=5
            + 体积小「2kb，moment16kb」
            + 用的API方法和moment类似
            + 更符合国际化日期处理规范
            + ...
3. 向服务器发送请求
    失败
        + 请求失败：向服务器发送请求，服务器没有相应对应的信息「HTTP状态码不是2开始的，或者压根就没有返回任何的信息」（网络层失败）
        + 服务器返回信息了「状态码也是200」，但是返回的信息不是我们想要的（业务层失败）
    基于post请求向服务器发送请求，需要基于请求主体把信息传递给服务器
        + 普通对象 -> 变为“[object Object]”字符串传递给服务器「不对的」
        + Axios库对其作了处理，我们写的是普通对象，Axios内部会默认把其变为JSON字符串，传递给服务器
        + 格式要求：
            + 字符串
                + json字符串 application/json
                    "{"x":10,"name":"珠峰"}"
                + urlencoded格式字符串 application/x-www-urlencoded格式字符串
                    "x=10&name=珠峰"
                + 普通字符串 text/plain
            + FormData对象「用于文件上传」multipart/form-data
                let fm = new FormData()
                fm.append('file',file)
            + buffer或者进制格式
                ...
    正常情况下，我们应该在第一次渲染之前componentWillMount开发发送异步的数据请求
        + 请求发送后，不需要等待
        + 继续渲染
        + 在第一次渲染结束后，可能数据已经回来了「即便没回来，也快了」
        + 等到数据获取后，我们修改状态，让视图更新，呈现真实的数据即可
        因为componentWillMount是不安全的，所以我们要把数据请求放在componentDidMount中

4. 函数组件部分
    触发Form表单校验的方式：
        1. 前提：提交按钮包裹在<Form>中，并且htmlType='submit'
        点击这个按钮，会自动触发Form的表单校验
        表单校验通过，会执行<Form onFinish={函数}>事件
            函数执行，形参获取的就是表单收集的信息
        2. 我们获取Form组件的实例「或者是子组件内部返回的方法」
        基于这些方法，触发表单校验&获取表单收集的信息等
            + validateFields
            + getFieldsValue
            + resetFields
            + ...
    函数组件中，遇到：修改某个状态后（视图更新后），想去做一些事情（而这些事情中，需要用到新修改的状态值），此时我们不能直接在代码的下面直接编写，或者把修改的状态改为同步的，这些都不可以，因为只有在函数重新执行，产生的新的闭包中，才可以获取最新的状态值。原是闭包中用的还是之前的状态值。
    --->基于useEffect设置状态的依赖，在依赖的状态发生改变后，去做要做的事情。
    修改某个状态后（视图更新后），想去做一些事情，但是要处理的事情，和新的状态值没有关系，此时可以把修改状态的操作，基于flushSync变为同步处理即可

