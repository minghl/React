1. React组件分类
    + 函数组件
        + 不具备“状态、ref、周期函数”等内容，第一次渲染完毕后，无法基于组件内部的操作来控制其更新，因此称之为静态组件
        + 但是具备属性及插槽，父组件可以控制其重新渲染
        + 渲染流程简单，渲染速度较快
        + 基于FP（函数式编程）思想设计，提供更细粒度的逻辑组织和复用
        + 函数组件没有this
    + 类组件
        + 具备“状态、ref、周期函数、属性、插槽”等内容，可以灵活的控制组件更新，基于钩子函数也可灵活掌握不同阶段处理不同的事情
        + 渲染流程繁琐，渲染速度较慢
        + 基于OOP（面向对象编程）思想设计，更方便实现继承
    + React Hooks组件
        + 基于React中新提供的Hook函数，可以让“函数组件动态化”
2. Hooks组件
    函数组件的每一次渲染（或者是更新），都是函数（重新）执行，产生一个全新的“私有上下文”「闭包」
        + 内部的代码也需要重新执行
        + 涉及的函数需要重新的构建「这些函数的作用域（函数执行的上级上下文），是每一次执行DEMO产生的闭包」
        + 每一次执行DEMO函数，也会把useState重新执行，但是：
            + 执行useState，只有第一次，设置的初始值会生效，其余以后再执行，获取的状态都是最新的状态值「而不是初始值」
            + 返回的修改状态的方法，每一次都是返回一个新的
    
    函数组件「或者Hooks组件」不是类组件，所以没有实例的概念「调用组件不再是创建类的实例，而是把函数执行，产生一个私有上下文而已」，再所以，在函数组件中，不涉及this的处理

    + 基础 Hook
        useState 使用状态管理
        useEffect 使用周期函数
        useContext 使用上下文信息
    + 额外的 Hook
        useReducer useState的替代方案，借鉴redux处理思想，管理更复杂的状态和逻辑
        useCallback 构建缓存优化方案
        useMemo 构建缓存优化方案
        useRef 使用ref获取DOM
        useImperativeHandle 配合forwardRef（ref转发）一起使用
        useLayoutEffect 与useEffect相同， 但会在所有的DOM变更之后同步调用effect
    + 自定义Hook

3. useState
    useState: React Hook函数之一，目的是在函数组件中，使用状态，并且后期基于状态的修改，可以让组件更新
        let [num,setNum]=useState(initialValue);
        + 执行useState，传递的initialValue是初始状态值
        + 执行这个方法，返回结果是一个数组:[状态,修改状态的方法]
            + num变量存储的是获取的状态值
            + setNum变量存储的是：修改状态的方法
        + 执行 setNum(value)
            + 修改状态值为value
            + 通知视图更新
    执行一次useState：把需要的状态信息都放在对象中统一管理
    + 执行setState方法的时候，传递的是啥值，就把状态整体改为啥值
        setState({
            supNum:state.supNum + 1
        }) 
        => 把状态值改为{supNum:11}，oppNum成员就丢失了
        => 并不会像类组件的this.setState一样，不支持部分状态的更新 
    + 应该改为以下的处理方案
        setState({
            ...state, // 在修改值之前，先把原有的所有状态，都展开赋值给新对象，再去修改要改动的那一项值即可
            supNum: state.supNum + 1
        })
    官方建议是：需要多个状态，就把useState执行多次即可
    useState自带了性能优化的机制：
    + 每一次修改状态值的时候，会拿最新要修改的值和之前的状态值做比较「基于Object.is做比较」
    + 如果发现两次值是一样的，则不会修改状态，也不会让视图更新「可以理解为：类似于PureComponent，在shouldComponentUpdate中做了浅比较和优化」
    
4. useEffect: 在函数组件中，使用生命周期函数
    useEffect(callback): 没设置依赖
        + 第一次渲染完毕后，执行callback，等价于 componentDidMount
        + 在组件第一次更新完毕后，也会执行callback，等价于 componentDidUpdate
    
    useEffect(callback,[]): 设置了，但是无依赖
        + 只有第一次渲染完毕后，才会执行callback，每一次视图更新完毕后，callback不再执行
        + 类似于 componentDidMount
    
    useEffect(callback,[依赖的状态(多个状态)]): 
        + 第一次渲染完毕会执行callback
        + 当依赖的状态值（或者多个依赖状态中的一个）发生改变，也会触发callback执行
        + 但是依赖的状态如果没有变化，在组件更新的时候，callback是不会执行的
    
    useEffect(()=> {
        return ()=>{
            // 返回的小函数，会在组件释放的时候执行
            // 如果组件更新，会把上一次函数执行，返回的小函数执行「理解为上一次渲染的组件释放了」
        }
    }): 

    useEffect必须在函数的最外层上下文中调用，不能把其嵌入到条件判断、循环等操作语句中
    useEffect如果有返回值，则返回值必须是一个函数「代表组件销毁时触发」；下面案例中，callback经过async的修饰，返回的是一个promise实例，不符合要求

    useLayoutEffect会阻塞浏览器渲染真实DOM，优先执行Effect链表中的callback；
    useEffect不会阻塞浏览器渲染真实DOM，在渲染真实DOM的同时，去执行Effect链表中的callback；
        + useLayoutEffect设置的callback要优先于useEffect去执行
        + 在两者设置的callback中，依然可以获取DOM元素「原因：真实DOM对象已经创建了，区别只是浏览器是否渲染」
        + 如果在callback函数中又修改了状态「视图又要更新」
            + useEffect：浏览器肯定是把第一次的真实已经绘制了，再去渲染第二次真实DOM
            + useLayoutEffect：浏览器是把两次真实DOM的渲染，合并在一起渲染的 

    视图更新的步骤：
        第一步：基于babel-preset-react-app把JSX编译为createElement格式
        第二步：把createElement执行，创建出virtualDOM
        第三步：基于root.render方法把virtualDOM变为真实DOM对象「DOM-DIFF」
            useLayoutEffect会阻塞第四步操作，先去执行Effect链表中的方法「同步操作」
            useEffect第四步操作和Effect链表中的方法执行，是同时进行的「异步操作」
        第四步：浏览器渲染和绘制真实DOM对象 

5. useRef
    类组件中，我们基于ref可以做的事情：
        1. 赋值给一个标签：获取DOM元素
        2. 赋值给一个类子组件：获取子组件实例「可以基于实例调用子组件中的属性和方法等」
        3. 赋值给一个函数子组件：报错「需要配合React.forwardRef实现ref转发，获取子组件中的某一个DOM元素」
    ref的使用方法：
        1. ref='box'
            this.refs.box 获取{不推荐使用}
        2. ref={x=>this.box=x}
            this.box 获取
        3. let box = React.createRef() 创建一个ref对象
            <hr ref={this.box} >
            this.box.current 获取DOM元素
    函数组件中，ref：
        1. 基于"ref={函数}"的方式，可以把创建的DOM元素（或者子组件的实例）赋值给box变量「不推荐」
        2. 也可以基于 React.createRef 创建ref对象来获取想要的内容
        3. 函数组件中，还可以基于 useRef Hook函数，创建一个ref对象
            + React.createRef 也是创建ref对象，既可在类组件中使用，也可以在函数组件中使用
                createRef在每一次组件更新的时候，都会创建一个全新的REF对象出来，比较浪费性能「函数组件中」
            + useRef 只能在函数组件中用「所有的ReactHook函数，都只能在函数组件中使用，在类组件中使用会报错」
                useRef在每一次组件更新的时候（函数重新执行），再次执行useRef方法的时候，不会创建新的REF对象了，获取到的还是第一次创建的那个REF对象
            + 总结：在类组件中，创建REF对象，我们基于React.createRef 处理；但是在函数组件中，为了保证性能，我们应该使用专属的useRef处理
        4. 类组件：基于ref获取子组件的实例，这样基于实例可以调用子组件内部挂载到实例上的东西;
           函数组件：基于forwardRef实现ref转发，目的：获取子组件内部的某个DOM元素;
           函数子组件内部，可以有自己的状态和方法了；如何实现：基于forwardRef实现ref的同时，获取函数子组件内部的状态或者方法呢？=> useImperativeHandle

6. useMemo
    语法：
        let xxx = useMemo(callback,[dependencies])
            + 第一次渲染组件的时候，callback会执行
            + 后期只有依赖的状态值发生改变，callback才会再执行
            + 每一次会把callback执行的返回结果赋值给xxx
            + useMemo具备“计算缓存”，在依赖的状态值没有发生改变，callback没有触发执行的时候，xxx获取的是上一次计算出来的结果。和Vue的计算属性非常的类似
    useMemo就是一个优化的Hook函数
        + 如果函数组件中，有消耗性能/时间的计算操作，则尽可能用useMemo缓存起来，设置对应的依赖；
        + 这样可以保证，当非依赖的状态发生改变，不会去处理一些没必要的操作，提高组件更新速度。

7. useCallback
    函数组件的每一次更新，都是把函数重新执行
        + 产生一个新的闭包
        + 在闭包中所有创建函数的操作，都会：重新创建新的堆内存「也就是函数都会重新创建」
    语法：
        let xxx = useCallback(callback,[dependencies])
            + 组件第一次渲染，useCallback执行，创建一个函数“callback”，赋值给xxx
            + 组件后续每一次更新，判断依赖的状态值是否改变，如果改变，则重新创建新的函数堆，赋值给xxx；但是如果，依赖的状态没有更新「或者没有设置依赖“[]”」则xxx获取的一直是第一次创建的函数堆，不会创建新的函数出来。
            + 或者说，基于useCallback，可以始终获取第一次创建函数的堆内存地址(或者说函数的引用)
            简单来讲：useCallback可以保证，函数组件的每一次更新，不再把里面的小函数重新创建，用的都是第一次创建的。
            useCallback不要乱用，并不是所有组件内部函数都拿其处理会更好！！
                + 虽然减少了堆内存的开辟
                + 但是useCallback本身也有自己的处理逻辑和缓存的机制，这个也消耗时间
    什么时候用useCallback？
        + 父组件嵌套子组件，父组件要把一个内部的函数，基于属性传递给子组件，此时传递的这个方法，我们基于useCallback处理一下会更好
            诉求：当父组件更新的时候，因为传递给子组件的属性仅仅是一个函数「特点：基本应该算是不变的」，所以不想再让子组件也跟着更新了
                + 第一条：传递给子组件的属性（函数），每一次需要是相同的堆内存地址（是一致的）. 基于useCallback处理
                + 第二条：在子组件内部也要做一个处理，验证父组件传递的属性是否发生改变，如果没有变化，则让子组件不能更新，有变化才需要更新 . 继承React.PureComponent即可「在shouldComponentUpdate中对新老属性做了浅比较」 . 函数组件是基于React.memo函数，对新老传递的属性做比较，如果不一致，才会把函数组件执行，如果一致，则不让子组件更新

8. 自定义Hook
    作用：提取封装一些公共的处理逻辑
    玩法：创建一个函数，名字需要是useXxx，后期就可以在组件中调用这个方法
    利用useXxx会自动校验规则，随便取名字就不会


        
        